name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 20

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: |
          npm run lint --workspace=@simple-todo/api
          npm run lint --workspace=@simple-todo/web

      - name: Run tests
        run: npm run test
        env:
          # Test environment variables
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          VITE_SUPABASE_URL: http://localhost:54321
          VITE_SUPABASE_ANON_KEY: test-anon-key
          # Skip database-dependent tests in CI
          CI: true

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Create self-contained API functions
        run: |
          # Create API directory structure
          mkdir -p api/database
          # Read utility files content
          response_content=$(cat apps/api/utils/response.ts)
          supabase_content=$(cat apps/api/utils/supabase.ts)
          # Create self-contained health.ts
          cat > api/health.ts << 'EOF'
          import { VercelRequest, VercelResponse } from '@vercel/node'
          
          interface ApiResponse<T = any> {
            success: boolean;
            data?: T;
            error?: string;
          }
          
          function sendSuccess<T>(res: VercelResponse, data: T, status = 200) {
            const response: ApiResponse<T> = {
              success: true,
              data
            }
            return res.status(status).json(response)
          }
          
          export default async function handler(
            req: VercelRequest,
            res: VercelResponse
          ) {
            if (req.method !== 'GET') {
              return res.status(405).json({ error: 'Method not allowed' })
            }
          
            try {
              const healthData = {
                message: 'Simple Todo API is running',
                timestamp: new Date().toISOString(),
                status: 'healthy'
              }
          
              return sendSuccess(res, healthData)
            } catch (error) {
              return res.status(500).json({ error: 'Internal server error' })
            }
          }
          EOF
          # Create self-contained database/health.ts
          cat > api/database/health.ts << 'EOF'
          import { VercelRequest, VercelResponse } from '@vercel/node'
          import { createClient } from '@supabase/supabase-js'
          
          const supabaseUrl = process.env.SUPABASE_URL!
          const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
          const supabase = createClient(supabaseUrl, supabaseKey)
          
          interface ApiResponse<T = any> {
            success: boolean;
            data?: T;
            error?: string;
          }
          
          function sendSuccess<T>(res: VercelResponse, data: T, status = 200) {
            const response: ApiResponse<T> = {
              success: true,
              data
            }
            return res.status(status).json(response)
          }
          
          function sendError(res: VercelResponse, message: string, status = 500) {
            const response: ApiResponse = {
              success: false,
              error: message
            }
            return res.status(status).json(response)
          }
          
          export default async function handler(
            req: VercelRequest,
            res: VercelResponse
          ) {
            if (req.method !== 'GET') {
              return res.status(405).json({ error: 'Method not allowed' })
            }
          
            try {
              // Test database connectivity by counting users
              const { error: userError } = await supabase
                .from('users')
                .select('id', { count: 'exact' })
                .limit(1)
          
              if (userError) {
                return sendError(res, `Database connection failed: ${userError.message}`, 503)
              }
          
              // Test tasks table connectivity
              const { error: taskError } = await supabase
                .from('tasks')
                .select('id', { count: 'exact' })
                .limit(1)
          
              if (taskError) {
                return sendError(res, `Tasks table error: ${taskError.message}`, 503)
              }
          
              const healthData = {
                message: 'Database connection healthy',
                timestamp: new Date().toISOString(),
                database: {
                  connected: true,
                  tables: {
                    users: 'accessible',
                    tasks: 'accessible'
                  }
                }
              }
          
              return sendSuccess(res, healthData)
            } catch (error) {
              return sendError(res, 'Database health check failed', 500)
            }
          }
          EOF
          echo "=== DEBUG: Final API structure ==="
          find api -name "*.ts"
          echo "=== DEBUG: Health function content ==="
          head -10 api/health.ts
          echo "=== DEBUG: Database health function content ==="
          head -15 api/database/health.ts

      - name: Build project artifacts
        run: |
          echo "=== DEBUG: Pre-build directory structure ==="
          ls -la
          echo "=== DEBUG: Running vercel build ==="
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          echo "=== DEBUG: Post-build .vercel/output structure ==="
          find .vercel/output -type f | head -10 || echo "No .vercel/output found"

      - name: Add missing function configurations
        run: |
          echo "=== DEBUG: Creating missing .vc-config.json files ==="
          # Create .vc-config.json for each function
          find .vercel/output/functions -name "*.func" -type d | while read func_dir; do
            if [ ! -f "$func_dir/.vc-config.json" ]; then
              echo "Creating config for $func_dir"
              cat > "$func_dir/.vc-config.json" << 'EOF'
          {
            "runtime": "nodejs18.x",
            "handler": "index.js",
            "launcherType": "Nodejs"
          }
          EOF
            fi
          done
          echo "=== DEBUG: Verifying config files ==="
          find .vercel/output/functions -name ".vc-config.json" | head -5
          echo "=== DEBUG: Final .vercel/output structure ==="
          find .vercel/output -name "*.func" -exec ls -la {}/.vc-config.json \;

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output/
          retention-days: 1

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output/

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --prebuilt'
          working-directory: ./