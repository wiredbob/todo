{"version":3,"file":"health.ts","sources":["/home/runner/work/todo/todo/api/database/health.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,gDAA0D;AAE3C,KAAK,UAAU,OAAO,CACnC,GAAkB,EAClB,GAAmB;IAEnB,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE;QACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAA;KAC7D;IAED,IAAI;QACF,+CAA+C;QAC/C,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,mBAAQ;aACxC,IAAI,CAAC,OAAO,CAAC;aACb,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;aAChC,KAAK,CAAC,CAAC,CAAC,CAAA;QAEX,IAAI,SAAS,EAAE;YACb,OAAO,IAAA,oBAAS,EAAC,GAAG,EAAE,+BAA+B,SAAS,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAA;SAC/E;QAED,gCAAgC;QAChC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,mBAAQ;aACxC,IAAI,CAAC,OAAO,CAAC;aACb,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;aAChC,KAAK,CAAC,CAAC,CAAC,CAAA;QAEX,IAAI,SAAS,EAAE;YACb,OAAO,IAAA,oBAAS,EAAC,GAAG,EAAE,sBAAsB,SAAS,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAA;SACtE;QAED,MAAM,UAAU,GAAG;YACjB,OAAO,EAAE,6BAA6B;YACtC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,QAAQ,EAAE;gBACR,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE;oBACN,KAAK,EAAE,YAAY;oBACnB,KAAK,EAAE,YAAY;iBACpB;aACF;SACF,CAAA;QAED,OAAO,IAAA,sBAAW,EAAC,GAAG,EAAE,UAAU,CAAC,CAAA;KACpC;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,IAAA,oBAAS,EAAC,GAAG,EAAE,8BAA8B,EAAE,GAAG,CAAC,CAAA;KAC3D;AACH,CAAC;AA7CD,0BA6CC","sourcesContent":["import { VercelRequest, VercelResponse } from '@vercel/node'\nimport { supabase } from '../utils/supabase'\nimport { sendSuccess, sendError } from '../utils/response'\n\nexport default async function handler(\n  req: VercelRequest,\n  res: VercelResponse\n) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' })\n  }\n\n  try {\n    // Test database connectivity by counting users\n    const { error: userError } = await supabase\n      .from('users')\n      .select('id', { count: 'exact' })\n      .limit(1)\n\n    if (userError) {\n      return sendError(res, `Database connection failed: ${userError.message}`, 503)\n    }\n\n    // Test tasks table connectivity\n    const { error: taskError } = await supabase\n      .from('tasks')\n      .select('id', { count: 'exact' })\n      .limit(1)\n\n    if (taskError) {\n      return sendError(res, `Tasks table error: ${taskError.message}`, 503)\n    }\n\n    const healthData = {\n      message: 'Database connection healthy',\n      timestamp: new Date().toISOString(),\n      database: {\n        connected: true,\n        tables: {\n          users: 'accessible',\n          tasks: 'accessible'\n        }\n      }\n    }\n\n    return sendSuccess(res, healthData)\n  } catch (error) {\n    return sendError(res, 'Database health check failed', 500)\n  }\n}"]}